from json import load
from main import crop_vehicle, load_color_model, predict_color, detect_license_plate
import time
from ultralytics import YOLO
import easyocr
import config

if __name__ == '__main__':

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∞—Å—Å–æ–≤
    with open(config.COLOR_CLASSES_PATH, "r", encoding="utf-8") as f:
        class_dict = load(f)
    class_names = [class_dict[str(i)] for i in range(len(class_dict))]

    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
    yolo_model = YOLO(config.YOLO_MODEL_PATH)
    model, transform, device = load_color_model(
        model_path=config.COLOR_MODEL_PATH,
        class_names=class_names,
        device="cuda" if config.USE_GPU else "cpu"
    )
    ocr_reader = easyocr.Reader(config.OCR_LANGS, gpu=config.USE_GPU)

    # –í—ã—Ä–µ–∑–∫–∞ –∞–≤—Ç–æ
    start_crop = time.time()
    cropped_image = crop_vehicle("Image_for_test/car.jpg", visualize=config.VISUALIZE, yolo_model=yolo_model)
    if not cropped_image:
        exit()
    end_crop = time.time()

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞
    start_pred_color = time.time()
    predicted_color = predict_color(
        pil_image=cropped_image,
        model=model,
        transform=transform,
        class_names=class_names,
        device=device,
        visualize=config.VISUALIZE
    )
    end_pred_color = time.time()

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Å–Ω–æ–º–µ—Ä–∞
    start_plate = time.time()
    license_plate = detect_license_plate(
        cropped_image,
        use_gpu=config.USE_GPU,
        visualize=config.VISUALIZE,
        reader=ocr_reader
    )
    end_plate = time.time()

    print(f"‚è±Ô∏è –í—ã—Ä–µ–∑–∞–Ω–∏–µ –∞–≤—Ç–æ –∑–∞–Ω—è–ª–æ {end_crop - start_crop:.3f} —Å–µ–∫—É–Ω–¥.")
    print(f"‚è±Ô∏è –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∑–∞–Ω—è–ª–æ {end_pred_color - start_pred_color:.3f} —Å–µ–∫—É–Ω–¥.")
    print(f"‚è±Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–Ω—è–ª–æ {end_plate - start_plate:.3f} —Å–µ–∫—É–Ω–¥.")

    print(f'\nüé® –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç: {predicted_color}\n'
          f'üî¢ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –ì–æ—Å. –Ω–æ–º–µ—Ä: {license_plate}\n'
          f'üöó –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –º–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ: {"–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ"}')
